% \iffalse meta-comment
%
% Copyright (C) 2018 by Justin Finnerty <jfinn24985@gmail.com>
%
% This file may be distributed and/or modified under the conditions of
% the LaTeX Project Public License, either version 1.3 of this license
% or (at your option) any later version.  The latest version of this
% license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX version
% 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{chemsec.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1994/06/01]
%<package>\ProvidesPackage{chemsec}
%<*package>
    [2018/02/01 v1.12 .dtx chemsec file]
%</package>
%<package>\RequirePackage{ifthen}[1994/06/01]
%<*driver>
\documentclass{ltxdoc}
\usepackage{chemsec}[2018/02/01]
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{chemsec.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{1996/06/05}{Initial version}
%
% \GetFileInfo{chemsec.dtx}
%
% \DoNotIndex{\newcommand,\newenvironment}
% 
%
% \title{The \textsf{chemsec} package\thanks{This document
%   corresponds to \textsf{chemsec}~\fileversion, dated \filedate.}}
% \author{Justin Finnerty \\ \textsf{jfinn24985@gmail.com}}
%
% \maketitle
%
% \section{Abstract}
% 
% A cross-reference system designed for an arbitrary set of items.
% Generates a document-order set of consecutive number labels that can
% be cross-referenced anywhere in the document. For example, this
% could be used for labelling chemical structures in a scientific
% document.
%
% \section{Usage}
%
% This package solves the problem of providing a sequence of labels to
% represent entities in a document. The motivating example is numeric
% labels for chemical structures in a scientific document. These labels
% share similar features to numeric bibliographic reference styles, both
% use numbers to represent something, the numbers form a single sequence
% starting from one and incrementing as references appear in the
% document. Furthermore a bibliographic reference can appear in multiple
% places in the text yet retains a single numeric label. For chemical
% structures we want the labels to be numeric and form a sequence.
% However there are a couple of differences to a bibliography. Firstly
% the name of the chemical structure generally appears where it is first
% used in the document along with its label rather than in a
% bibliography or footnote. Secondly it is common to use a single
% numeric label for closely related structures, appending a sublabel to
% denote individual structures. For example we might have ``\textsf{methyl
% acetate (\textbf{1a})}'' and ``\textsf{ethyl acetate (\textbf{1b})}'' being
% specific examples of an ``\textsf{acetic acid ester (\textbf{1})}''
% structure.
%
% The solution presented here uses keys to identify structures, in a
% similar way to the BibTeX, with a special format that allows
% associating related structures to their exemplar structure. This is
% done using keys that contain an exclamation mark |!| to separate the
% key for an exemplar structure from a sub-key for the related
% structures. Following our example above with might have keys
% |acetate!methyl|, |acetate!ethyl| and |acetate| as the keys for methyl
% acetate, ethyl acetate and acetic acid ester respectively.  Using keys
% in this way would automatically give the labels
% ``\textsf{\textbf{1a}}'', ``\textsf{\textbf{1b}}'' and
% ``\textsf{\textbf{1}}''.  As an alternative you can manually provide a
% more meaningful sub-label for each sub-key which could result in
% ``\textsf{methyl acetate (\textbf{1-Me})}'' and ``\textsf{ethyl
% acetate (\textbf{1-Et})}'' and ``\textsf{acetic acid ester
% (\textbf{1})}'' structure.

% Using sub-keys is entirely optional and you can write a complete
% document without using the sub-key feature. Keys with sub-keys can be
% freely mixed in a document with keys that do not have sub-keys. We
% suggest you generally want to provide an exemplar key without sub-key
% for each set of keys which have sub-keys. This allows you to refer in
% the document to the group of related chemicals as well as the specific
% structures. We have shown this above in our acetate examples.
%
% Hopefully the most difficult part of us
% You identify each entity that you want labelled with a unique key and
% an optional sub-key. In a chemistry document an entity would be a
% chemical structure, the key represents the base structure and the
% sub-key might represent a substituent or conformation of the base
% structure. Then you replace each use of an entity in the document with
% one of the |\ChemCite| macros, optionally one of these calls can
% include the full name of the entity. When the document is processed
% each call to the macros will be replaced with a label and optionally
% the name of each entity. For example using the base |\ChemCite| macro
% will display the entity name and label at the first |\ChemCite| macro
% encountered and just the label at subsequent calls. Different version
% of the |\ChemCite| macro allows control over what text is displayed.
%
% Rather than add the compound name to one of the |\ChemCite| macro
% calls the name and sub-label can be mapped to the key using the
% |\DefineChemical| macro.  This macro simply adds the name and
% sub-label to the system to be later recalled using a |\ChemCite|
% macro.
%
% You can output a simple table listing all the cited entities using the
% |\ChemEntityTable|. The table is useful during document preparation as
% a way display the names along with their key and sub-keys.
%
% \DescribeMacro{\DefineChemical}\marg{key}\marg{name}\marg{sublabel}
% Associate a chemical name with a key and label.  This optional command
% does not display any output in the document nor does it define the
% first part of the label.  It allows the user to define the chemicals
% used in the document in a single place rather than as they appear in
% the document.  The list could even be placed in a separate file,
% facilitating the reuse of keys and names in other documents.
%   
% \subsection{ChemCite Macros}
%
% A number of |\ChemCite| macros are defined that allow the user to
% control what information related to a key is output.
%
% : consecCite Output label and optionally the full name
% 
% : consecCiteLabel Output label only
% 
% : consecNoFullname Suppress displaying the full name the first time
% consecCite is called.
% 
% : consecCiteFull Output the full name and label
% 
% : consecCiteFullOnly Output the full name, no lobel.
% 
% : consecCiteGeneric Output the full name of the generic entity with
% the label of the sub-entity
% 
% : consecEntity [label]{key}{text} Define a generic entity
% 
% : consecSubEntity [label][sublabel]{key}{subkey}{text} Define a
% specific entity
% 
% : consecEntityTable Output a table of entity names and labels. Can
% also output keys.  This is for creating a useful reference table when
% editing a document rather than for final output.
% 
% 
% : consecEntityTitle Text used in consecEntityTable for title of the
% table
% 
% : consecEntityNameTitle Text used in consecEntityTable for entity name
% column
% 
% : consecEntityLabelTitle Text used in consecEntityTable for label
% column
% 
% : consecEntityKeyTitle Text used in consecEntityTable for the optional
% key column
% 
% 
% Package options:
% 
% : noconsecutive Turns off consecutive numbering for main labels
% 
% : uppersub Turns on using UPPER case consecutive numbering for sub
% labels.
% 
% : alpha Turns on using alphabetic numbering for main labels
% 
% : upper Turns on UPPER case alphabetic numbering for main labels (must
% be used with "alpha"
% 
% 
% (obsolete, now uses "aux") The package uses its own file to store
% labels that are read in at start up and written out during a run
% (Unused labels from this file generate a warning but do not remove
% entry, even is not defined. In this way the file can be used liek a
% bibtex data file.
% 
% \subsection{Internal macros that control style}
%
% Style macros can be overridden by the user to control the style of the
% label and accompanying text.
% 
% \DescribeMacro{\ChemLabelStyle} Internal macro that formats a
% label. It is used by the other two style macros for this purpose.
% Users may redefine this macro to change the label formatting.
%
% \DescribeMacro{\ChemFullLabelStyle} Internal macro used to format a
% label and its full name text.  Users may redefine this macro to change
% the name and label formatting, particularly when you wish to format
% the label and sub-label separately.
% 
% \DescribeMacro{\ChemShortLabelStyle} Internal macro used to formats a
% label without name text. Users may redefine this macro to change the
% name and label formatting, particularly when you wish to format the
% label and sub-label separately.
% 
% \DescribeMacro{\ChemMainCounterStyle} Internal macro that converts the
% counter used for main key label into a number or letter. The default
% implementation uses |\arabic| to generate a number. Users may redefine
% this macro to output letters instead of numbers.
%
% \DescribeMacro{\ChemSubCounterStyle} Converts the counter used for the
% sub-key label into a number or letter. The default implementation uses
% |\alph| to generate a letter. Users may redefine this macro to output
% numbers instead of letters.
% 
% \section{Design brief}
% 
% The package should be able to consistently label an entity throughout
% the document based on a user-defined key. The label can be either a
% consecutive number or a user-defined label. These labels can be
% combined with a sublabel, which can also be consecutive or
% user-defined.
% 
% When sub-labels are used a user-supplied key and sub-key are
% required. Any entity associated with the key without a sub-key is
% considered to be a generic entity for any entities defined with the
% same key and a sub-key. 
% 
% \subsection{Limits}
% 
% \begin{itemize}
% \item The package can provide consecutive labels or user-defined
%   labels but not both.
% 
% \item Unless user-defined labels are used, consecutive labels are
%   numeric for labels and alphabetic for sub-labels.
% 
% \item The package can provide only a single set of consecutive labels.
% 
% \item The package can provide consecutive sub-labels or user-defined
%   sub-labels but not both for each label.
% \end{itemize}
% 
% \subsection{Actions}
% 
% \begin{itemize}
% \item The first time the XXX, YYY macros appear in the latex document
%   with a given key is where the consecutive number label for the key
%   is defined (unless user-defined label are being used).
% 
% \item Using macros XXX, YYY provides the label without defining the
%   consecutive number label. This allows the label to appear, for
%   example in a table, abstract or figure, before the desired defining
%   location of the label.
% 
% \item The names of entities can be defined anywhere in the document
%   and appear in a user-controlled manner.
% 
% \item The basic macros typeset the entity name and label at the first
%   defining reference position and only the label in other places.
% 
% \item A range of advanced macros allow greater control over the
%   display of the entity name and label.  For example the user can
%   output a label and sub-label but use the name of the generic entity.
%   A chemistry example of this with ``ethyl acetate (1b)'' and its
%   generic entity ``acetic acid ester (1)'' appearing as ``\dots{}gives
%   the second acetic acid ester (1b)\dots{}''.
% 
% \item The label will be typeset in a particular, user configurable,
%   style. The label should be consistently formatted, even in
%   math-mode.
% 
% \item The label can be used transparently by other packages. For
%   example it can be used with the \textsf{psfrag} package to inject
%   the correct labels into figures at documentation preparation time
%   rather than having to recreate new figures whenever the label
%   numbering changes.
% 
% \end{itemize}
% 
% \subsection{Known bugs}
% 
% The package does not currently detect when output occurs at the
% beginning of a sentence and automatically capitalise the first
% non-capital letter. The only solution is to avoid using the macros
% that might produce entity names at the start of a sentence.
% 
%
% \section{Implementation}
% 
% The package creates a virtual mapping of keys to a name and a
% label. The key is stored as |Main!Sub| if the key has a sub-key. This
% mapping is stored into the \textsf{aux} file where it is read at the
% start of each document processing.  If the mapping is altered during
% processing the user gets a warning to reprocess the document, similar
% to other automatically created indices.
% 
% The package has several sets of macros. The public macros are used to
% define the key to name mapping and to lookup and output the names and
% labels based on the key during document processing.  One set of
% internal macros defines the style used to display the name and
% labels. These macros can be redefined by the user. A second set of
% internal macros controls the definition and management of the map
% data. A third set control logging information and extra output that
% might be used during testing.
%
% RCS info $Log: consec.sty,v $ Revision 1.1.1.1 2005/11/18 08:58:06
% finnerty Consecutive: A latex package for consecutively numbered
% entities.
%
% Revision 1.10 1999/12/10 04:52:45 finnerty This version provides star
% forms of the standard commands (except for NoCite). The star forms
% override the standard first entry, first number by adding NoCite
% commands into the auxfile. As these files are read in before the
% document, but in order they should provide the author with greater
% flexibility in defining the numbering order.
%
% An optional argument that would allow the author to set specific
% numbers in addition to automatic numbering was rejected. Either the
% author should define a numerical label for all compounds using the
% (no-longer) optional sublabel field and turns off auto-numbering or
% use the NoCite{} and Chem??Cite*{} commands to get the desired
% numbering.
%
% Revision 1.9 1999/12/09 22:21:37 finnerty First Working Version.
%
% Revision 1.8 1999/09/28 00:11:15 finnerty New version has changed
% entire philosophy. The use of lists while conservative of resources
% ran like a wet week in the summer holidays. This version defines three
% control words for each key so it uses far more resources but runs an
% order of magnitude faster.
%
% It cannot handle sublabels for mainkey which have "auto" subkeys.
%
% It doesn't handle part processing of documents at all---yet..
%
% Revision 1.7 1999/08/23 00:39:39 finnerty Revamped and simplified
% RealCite to include processing of sublabels by index or explicit. This
% meant that macro CN\@{}FindSubLabel was no longer needed and has been
% removed.
%
% A side effect of the revamp was that some warning about labelling
% could be done. However, editing the text in a DefineChemical will NOT
% give a warning and will NOT bue used in the current run, as the
% package will see the version in the '.aux' file first and ignore the
% new DefinChemical. However, it does store the new version in the
% '.aux' file so rerunning will make the new values current.
%
% Revision 1.6 1999/08/20 06:23:46 finnerty MAJOR version update.  This
% version handles implicit and explicit sublabels. The explicit and
% implicit sublabels may have a un-sublabelled key which can be accessed
% implicitly using the ChemMFSCite commands.
%
% This version saves definitions to the auxilliary file. When a compound
% is multiply defined the earliest definition is used, all subsequent
% definitions are ignored.
%
% TODO: Output table of chemicals and numbers.  TODO: Output "Warning,
% need to rerun LaTeX message" as appropriate.
%
% POSSIBLE extensions: ChemMainCite = ChemMFCite + (ChemSCite)
%
% Revision 1.5 1999/08/18 06:12:05 finnerty Partly acheived
% goal. Improved ScanKeyList and ScanSubKeyList work except for a bug in
% ScanSubKeyList where CN\@{}element refuses to be subdivided in the
% MainKey macro.
%
% Revision 1.4 1999/07/12 02:07:48 finnerty Corrected behaviour of
% subkeys to output the fullname the first time they are called,
% regardless of whether the mainkey has been called.
%
% Revision 1.3 1999/07/12 00:52:16 finnerty Added the ability to output
% a single index for each mainkey, regardless of the sublabel. However,
% a only the first time one of the subkey is output is the 'fullname
% (label)' given. Subsequent subkeys are only output with the 'label'.
%
% Revision 1.2 1999/07/09 07:30:44 finnerty Updated the chem style with
% the ability to handle user defined chemical names and sublabels, that
% may be blank. The chemical names are output the first time a citation
% is used along with the index and sublabel as a 'full'
% citation. Subsequently a 'short' citation containing only the index
% and sublabel is output. Currently, although a sublabel can be used
% each key is still given a unique index.
%
% Updated the chem style with two new user redefinable style
% functions. These functions allow the user to have complete control
% over the style of the citation output. This means that if a user wants
% to use only their labels, a quick hack could be to redefine these
% style to ignore the generated index.
%
% Revision 1.1 1999/06/29 06:08:30 finnerty Initial revision
%
% 
% Chemical Numbering Latex Macro system.
%
% Date: 1999/06 Author: Justin J Finnerty
%
% This uses a simple first cited first numbered algorithm to generate a
% unique sequential label for a set of compounds. It relies on a set of
% chemical definitions that can appear anywhere in the text and are
% stored in the '.aux' file at program termination and read in at
% program start up.
%
% Note on programming style. All the functions are declared using LaTeX
% commands unless using TeX functions edef and xdef was required. The
% public functions have been defined using LaTeX2e's
% DeclareRobustCommand*{}.
%
% The user controls the output of the citations using ChemLabelStyle,
% ChemFullLabelStyle ChemShortLabelStyle.
%
% \StopEventually{}
%
% \subsection{Output Style Macros}
%
% \begin{macro}{\ChemLabelStyle} \marg{label} The default implementation
%   formats the label in a sloping bold font.
%    \begin{macrocode}
\DeclareRobustCommand*{\ChemLabelStyle}[1]{%
  \textsl{\bfseries{}#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ChemFullLabelStyle}
%   \marg{full name} \marg{main label} \marg{sub-label} Formats the full
%   entity name and label. The default implementation does not format
%   the entity name. The default implementation appends the sub-key
%   label to the main label and uses the |\ChemLabelStyle| to format
%   them together.
%    \begin{macrocode}
\DeclareRobustCommand*{\ChemFullLabelStyle}[3]{%
  \ifthenelse{\equal{}{#3}}{%
    #1 (\ChemLabelStyle{#2})%
  }{%
    #1 (\ChemLabelStyle{#2#3})%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ChemShortLabelStyle}
%   \marg{main label} \marg{sub-label} Formats the labels when they
%   appear without the entity name. The default implementation appends
%   the sub-key label to the main label and uses the |\ChemLabelStyle|
%   to format them together.
%    \begin{macrocode}
\DeclareRobustCommand*{\ChemShortLabelStyle}[2]{%
  \ifthenelse{\equal{}{#2}}{%
    \ChemLabelStyle{#1}%
  }{%
    \ChemLabelStyle{#1#2}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ChemMainCounterStyle}\marg{counter}
%   Converts the counter used for the key label into a number or
%   letter. The default implementation uses |\arabic| to generate a
%   number.
%    \begin{macrocode}
\DeclareRobustCommand*{\ChemMainCounterStyle}[1]{%
  \arabic{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ChemSubCounterStyle}\marg{counter}
%   Converts the counter used for the sub-key label into a number or
%   letter. The default implementation uses |\alph| to generate a
%   letter.
%    \begin{macrocode}
\DeclareRobustCommand*{\ChemSubCounterStyle}[1]{%
  \alph{#1}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Macros for Debugging and Draft Output}
%
% Several macros are defined to implement the |draft| and |debug|
% package options.  When these options are not used these macros fall
% back on default implementations that mostly do nothing.  These macros
% are redefined when the options are used.
%
%  \begin{macro}{\CN@DEBUG}
%    Internal macro used to suppress debugging messages when not
%    debugging.  This is redefined if the |debug| package option is used
%    to output debugging messages in the processing log.
%    \begin{macrocode}
\makeatletter
\gdef\CN@DEBUG #1#2{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\CN@WARN}
%   Internal macro used to output errors and warnings as information
%   messages when not debugging. This is redefined if the |debug| option
%   is used to promote these messages to warning messages in the
%   processing log.
%    \begin{macrocode}
\gdef\CN@WARN #1#2{\PackageInfo{#1}{#2}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\CN@DRAFT}
%   Internal macro used to suppress draft only output when not in draft
%   mode. This is redefined if the |debug| or |draft| option is used to
%   add superscript text in the output document.
%    \begin{macrocode}
\gdef\CN@DRAFT #1{}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Options for Debugging and Draft Output}
%
% The package has several options to help with using the package.
%
%  \begin{itemize}
%  \item  The \textsf{debug} option generates more error and warning messages
%    as well as outputing draft data. It does this by redefining the
%    |\CN@DEBUG|, |\CN@WARN| and |\CN@DRAFT| macros.
%    \begin{macrocode}
\DeclareOption{debug}{%
  \gdef\CN@DEBUG #1#2{\PackageInfo{#1}{#2}}%
  \gdef\CN@WARN #1#2{\PackageWarning{#1}{#2}}%
  \gdef\CN@DRAFT #1{$^{[#1]}$}%
  }
%    \end{macrocode}  
%  \item The \textsf{draft} option outputs some draft data. It does this
%  by redefining the |\CN@DRAFT| macro.
%    \begin{macrocode}
\DeclareOption{draft}{%
  \gdef\CN@DRAFT #1{$^{[#1]}$}%
  }
\ProcessOptions

%    \end{macrocode}
%  \end{itemize}
%
% \subsection{Counters}
%
% Several counters are used internally for generating the label
% values. They should not be manually altered by the user.
%  
% \begin{itemize}
% \item |CN@MaxLabelIndex| tracks the maximum label index.
%    \begin{macrocode}
\newcounter{CN@MaxLabelIndex}
\setcounter{CN@MaxLabelIndex}{0}
%    \end{macrocode}
% \item |CN@LabelIndex| is the number of the current label.
%    \begin{macrocode}
\newcounter{CN@LabelIndex}
%    \end{macrocode}
% \item |CN@SubLabelIndex| is the number of the current sub-key label
%    \begin{macrocode}
\newcounter{CN@SubLabelIndex}
%    \end{macrocode}
% \end{itemize}
%
% \subsection{Internal Variables}
%
% \begin{itemize}
% \item |\CN@@label| is a dummy value used when no label is found for a
%   particular key. This is a guard value for erroneous usage.
%    \begin{macrocode}
\expandafter\def\csname CN@@label\endcsname{999}
%    \end{macrocode}
% \item |\CN@@name| is a dummy name used when no name is found for a
%   particular key. This is a guard value for erroneous usage.
%    \begin{macrocode}
\expandafter\def\csname CN@@name\endcsname{X}
%    \end{macrocode}
% \item |\CN@@sublabel| is a dummy sub-label used when no label is found
%   for a particular key/sub-key. This is a guard value for erroneous
%   usage.
%    \begin{macrocode}
\expandafter\def\csname CN@@sublabel\endcsname{X}
%    \end{macrocode}
% \item |CN@KeyFound| is a boolean to signal whether the key was found
%   in the keylist. Failure to be found indicates that this is the first
%   time this key was cited.
%    \begin{macrocode}
\newboolean{CN@KeyFound}
%    \end{macrocode}
% \item |CN@ScanList| is a boolean to signal whether the key was found
%   in the last loop of the map scan.
%    \begin{macrocode}
\newboolean{CN@ScanList}
%    \end{macrocode}
% \item |CN@Warning| is a boolean that signals that the document has
%   possible incorrect labels and needs to be reprocessed. This is
%   similar to other places where latex automatically generates labels.
%    \begin{macrocode}
\newboolean{CN@Warning}
\setboolean{CN@Warning}{false}
\AtEndDocument{%
  \ifthenelse{\boolean{CN@Warning}}{%
    \PackageWarningNoLine{chem}{Chem-label(s) were used before they were
      defined.  Rerun to get chem-labels right.}%
  }{%else
    % do nothing
  }%end if
}%end def
%    \end{macrocode}
% \end{itemize}
%
% \subsection{Internal Macros}
%
% The package creates a virtual mapping of keys to a name and a
% label. The key is stored as Main!Sub if the key has a sub-key. This
% mapping is stored into the \textsf{aux} file where it is read at the
% start of each document processing.  If the mapping is altered during
% processing the user gets a warning to reprocess the document, similar
% to other automatically created indices.
%
% \begin{macro}{\CN@mainpartofkey} 
%   Splits the representation of a key as Main!Sub, returning only the
%   Main part.
%    \begin{macrocode}
\gdef\CN@mainpartofkey (#1!#2){#1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@MainKey}
%   Acts as a driver macro for |\CN@mainpartofkey| macro.
%    \begin{macrocode}
\gdef\CN@MainKey (#1){\CN@mainpartofkey(#1!)}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@definenewchemical}\marg{main!sub
%   key}\marg{name}\marg{sublabel}
%   Associate a key with a chemical name and sub-label. The instances of
%   this macro written in the \textsf{aux} file are what define the
%   current mapping of key to names and sublabels. There is a check to
%   make sure the key is unique but there is no check that the sublabel
%   is unique.
%
%   This macro is the main macro that creates the table of key name and
%   labels that is used by the other macros to generate output in the
%   document.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@definenewchemical}[3]{%key, name, label
  % check for previous definition of name
  \if\csname CN@#1@label\endcsname\relax%ifdef
  % label not defined
  \CN@DEBUG{chem}{Defining new compound with key "#1". Name is "#2",
    sublabel is "#3".}%
  \expandafter\def\csname CN@#1@label\endcsname{0}%
  \expandafter\def\csname CN@#1@name\endcsname{#2}%
  \ifthenelse{\equal{#3}{-}}{%if no sublabel
  }{%else
    \ifthenelse{\equal{#3}{}}{%if no sublabel
    }{%else
      \expandafter\def\csname CN@#1@sublabel\endcsname{#3}%
    }%end if
  }%end if
  \else%
  % previous definition, do nothing
  \CN@DEBUG{chem}{Attempt to redefine "#1" ignored.}%
  \fi%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@GetFullName}
%   Check that a name is defined for the given key. If no name exists
%   then check using only the Main part of a Main!Sub key.  If still no
%   name is found then output '??' and print an error message to the
%   processing log.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@GetFullName}[1]{%
  \if\csname CN@#1@name\endcsname\relax%if no name
  % and
  \if\csname CN@\CN@MainKey(#1)@name\endcsname\relax%if no mainkey name
  \CN@WARN{chem}{Attempt to find name for key "#1" failed.}%
  \setboolean{CN@Warning}{true}%
  ??%
  \else%
  % Use main key name
  \csname CN@\CN@MainKey(#1)@name\endcsname%
  \fi%endif
  \else%
  % use my own name
  \csname CN@#1@name\endcsname%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@GetLabel}
%   Check that a label is defined for the given key. If no label exists
%   then check using only the Main part of a Main!Sub key.  If still no
%   label is found then output value of the current
%   \textsf{CN\@{}MaxLabelIndex}.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@GetLabel}[3]{% key, foundbool,
  % indexcount
  \setboolean{#2}{true}%
  \CN@DEBUG{chem}{GetLabel: looking for '#1'}%
  % \if\csname CN@#1@label\endcsname\relax %if undef
  % \CN@WARN{chem}{GetLabel: Error accessing label for '#1'. Possibly
  % misspelled or used before it was defined defined.}%
  % \CN@DEBUG{chem}{GetLabel: MaxLabelIndex=\arabic{CN@MaxLabelIndex}}%
  % \stepcounter{CN@MaxLabelIndex}%
  % \expandafter\xdef\csname%
  % CN@#1@label\endcsname{\arabic{CN@MaxLabelIndex}}%
  % \setboolean{#2}{false}%
  % \fi%
  \setcounter{#3}{\csname CN@#1@label\endcsname}%
  \CN@DEBUG{chem}{GetLabel: Label count is \arabic{#3}}%
  \ifthenelse{\value{#3} = 0}{%
    \CN@DEBUG{chem}{GetLabel: Found label '\csname CN@#1@label\endcsname' for '#1' is zero.}%
    \CN@DEBUG{chem}{GetLabel: MaxLabelIndex=\arabic{CN@MaxLabelIndex}}%
    \stepcounter{CN@MaxLabelIndex}%
    \CN@DEBUG{chem}{GetLabel: Increment MaxLabelIndex to \arabic{CN@MaxLabelIndex}}%
    \expandafter\xdef\csname CN@#1@label\endcsname{\arabic{CN@MaxLabelIndex}}%
    \setcounter{#3}{\csname CN@#1@label\endcsname}%
    \setboolean{#2}{false}%
  }{%else
    % do nothing
  }%end if def to 0
  % \fi % end if undef
  \CN@DEBUG{chem}{GetLabel: Result counter=\arabic{#3}}%
}%end def
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@GetSubLabel}
%   Check that a sublabel is defined for the given key. If no sublabel
%   exists then try and calculate a value based on the number of keys
%   having the same Main part of the Main!Sub key.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@GetSubLabel}[3]{% key, found?, return-element
  \setboolean{#2}{true}%
  \CN@DEBUG{chem}{GetSubLabel: looking for sublabel of '#1'}%
  \ifthenelse{\equal{\CN@MainKey(#1)}{#1}}{%if a mainkey
    \CN@DEBUG{chem}{GetSubLabel: '#1' is a mainkey .: no sublabel}%
    \xdef#3{}%
  }{%else
    \if\csname CN@#1@sublabel\endcsname\relax%if undef
    \setboolean{#2}{false}%
    \CN@DEBUG{chem}{GetSubLabel: Sublabel not previously defined}%
    \if\csname CN@\CN@MainKey(#1)@sublabel\endcsname\relax%if
    % mainkey undef
    \setcounter{CN@SubLabelIndex}{0}%
    \else%
    \setcounter{CN@SubLabelIndex}{\csname
      CN@\CN@MainKey(#1)@sublabel\endcsname}%
    \fi%
    \CN@DEBUG{chem}{GetSubLabel: Highest label for these keys is
      \arabic{CN@SubLabelIndex}.}%
    \stepcounter{CN@SubLabelIndex}%
    \expandafter\xdef\csname CN@\CN@MainKey(#1)@sublabel\endcsname{\arabic{CN@SubLabelIndex}}%
    \expandafter\xdef\csname CN@#1@sublabel\endcsname{\ChemSubCounterStyle{CN@SubLabelIndex}}%
    \CN@DEBUG{chem}{GetSubLabel: Sublabel now defined as '\csname CN@#1@sublabel\endcsname'}%
    \else%
    \CN@DEBUG{chem}{GetSubLabel: Sublabel previously defined as '\csname CN@#1@sublabel\endcsname'}%
    \fi%end if
    \xdef#3{\csname CN@#1@sublabel\endcsname}%
  }%end if
}% enddef
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@RealCite}
%   Search for the label and sublabel for a given key.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@RealCite}[4]{%key,
  % found, index-counter,
  % sub
  \CN@DRAFT{#1}%
  \CN@DEBUG{chem}{In RealCite}%
  \setcounter{#3}{0}%
  \setcounter{CN@SubLabelIndex}{0}%
  \setboolean{#2}{false}%
  \xdef#4{}%
  \CN@DEBUG{chem}{Real: calling GetLabel for '\CN@MainKey(#1)', the main
    part of '#1'}%
  \CN@GetLabel{\CN@MainKey(#1)}{#2}{#3}%
  \CN@DEBUG{chem}{Real: calling GetSubLabel for "#1"}%
  \CN@GetSubLabel{#1}{CN@ScanList}{#4}%
}%end def
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\NoCite}
%   Search for the label and sublabel for a given key without producing
%   any output.
%    \begin{macrocode}
\DeclareRobustCommand*{\NoCite}[1]{%
  \CN@RealCite{#1}{CN@KeyFound}{CN@LabelIndex}{\CN@SubLabel}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@ChemCite}
%   Output name, label and sublabel for a given key. The name is output
%   only if |CN@KeyFound| is \textsf{false} which occurs the first time
%   a key is cited.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@ChemCite}[1]{%
  % \CN@DEBUG{chem}{in Chemcite}%
  \CN@RealCite{#1}{CN@KeyFound}{CN@LabelIndex}{\CN@SubLabel}%
  % \CN@DEBUG{chem}{Cite: called Real}%
  \ifthenelse{\boolean{CN@KeyFound}}{%
    % \CN@DEBUG{chem}{Cite: key found, use Short}%
    \ChemShortLabelStyle{\ChemMainCounterStyle{CN@LabelIndex}}{\CN@SubLabel}%
  }{%else
    % \CN@DEBUG{chem}{Cite: key not found, use Long}%
    \ChemFullLabelStyle{\CN@GetFullName{#1}}{\ChemMainCounterStyle{CN@LabelIndex}}{\CN@SubLabel}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@ChemFCite}
%   Output name, label and sublabel for a given key. The name is always
%   output.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@ChemFCite}[1]{%
  % \CN@DEBUG{chem}{in ChemFullCite}%
  \CN@RealCite{#1}{CN@KeyFound}{CN@LabelIndex}{\CN@SubLabel}%
  % \CN@DEBUG{chem}{Cite: called Real}%
  \ChemFullLabelStyle{\CN@GetFullName{#1}}{\ChemMainCounterStyle{CN@LabelIndex}}{\CN@SubLabel}%
}%
% \end{macrocode}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@ChemSCite}
%   Output label and sublabel for a given key. The name is never output.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@ChemSCite}[1]{%
  % \CN@DEBUG{chem}{in ChemShortCite}%
  \CN@RealCite{#1}{CN@KeyFound}{CN@LabelIndex}{\CN@SubLabel}%
  % \CN@DEBUG{chem}{SCite: called Real}%
  \ChemShortLabelStyle{\ChemMainCounterStyle{CN@LabelIndex}}{\CN@SubLabel}%
}%
% \end{macro}
%
% \begin{macro}{\CN@ChemMFCite}
%   Output name associated with the Main part of the Main!Sub key as
%   well as the label and sublabel.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@ChemMFCite}[1]{%
  % \CN@DEBUG{chem}{in ChemMainFullCite}%
  \CN@RealCite{\CN@MainKey(#1)}{CN@KeyFound}{CN@LabelIndex}{\CN@SubLabel}%
  % \CN@DEBUG{chem}{Cite: called Real}%
  \ChemFullLabelStyle{\CN@GetFullName{\CN@MainKey(#1)}}{\ChemMainCounterStyle{CN@LabelIndex}}{\CN@SubLabel}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@ChemMSCite}
%   Output the label for the Main part of the Main!Sub key.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@ChemMSCite}[1]{%
  % \CN@DEBUG{chem}{in ChemMainShortCite}%
  \CN@RealCite{\CN@MainKey{#1}}{CN@KeyFound}{CN@LabelIndex}{\CN@SubLabel}%
  % \CN@DEBUG{chem}{SCite: called Real}%
  \ChemShortLabelStyle{\ChemMainCounterStyle{CN@LabelIndex}}{\CN@SubLabel}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@ChemCiteStar}
%   Call \\NoCite before \\CN\@{}ChemCite.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@ChemCiteStar}[1]{%
  % \CN@DEBUG{chem}{in Chemcite}%
  \write\@auxout{\string\NoCite{#1}}\CN@ChemCite{#1}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@ChemFCiteStar}
%   Call \\NoCite before \\CN\@{}ChemFCite.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@ChemFCiteStar}[1]{%
  % \CN@DEBUG{chem}{in ChemFullCite}%
  \write\@auxout{\string\NoCite{#1}}\CN@ChemFCite{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@ChemSCiteStar}
%   Call \\NoCite before \\CN\@{}ChemSCite.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@ChemSCiteStar}[1]{%
  % \CN@DEBUG{chem}{in ChemShortCite}%
  \write\@auxout{\string\NoCite{#1}}\CN@ChemSCite{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@ChemMFCiteStar}
%   Call \\NoCite before \\CN\@{}ChemMFCite.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@ChemMFCiteStar}[1]{%
  % \CN@DEBUG{chem}{in ChemMainFullCite}%
  \write\@auxout{\string\NoCite{#1}}\CN@ChemMFCite{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CN@ChemMSCiteStar}
%   Call \\NoCite before \\CN\@{}ChemMSCite.
%    \begin{macrocode}
\DeclareRobustCommand*{\CN@ChemMSCiteStar}[1]{%
  % \CN@DEBUG{chem}{in ChemMainShortCite}%
  \write\@auxout{\string\NoCite{#1}}\CN@ChemMSCite{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
% \subsection{Public Interface Macros}
%
% \begin{macro}{\ChemCite}
%   Delegate to CN\@{}ChemCiteStar or CN\@{}ChemCite depending on
%   whether '*' was used.
%    \begin{macrocode}
\DeclareRobustCommand*{\ChemCite}{%
  \@ifstar{\CN@ChemCiteStar}{\CN@ChemCite}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ChemFCite}
%   Delegate to CN\@{}ChemFCiteStar or CN\@{}ChemFCite depending on
%   whether '*' was used.
%    \begin{macrocode}
\DeclareRobustCommand*{\ChemFCite}{%
  \@ifstar{\CN@ChemFCiteStar}{\CN@ChemFCite}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ChemSCite}
%   Delegate to CN\@{}ChemSCiteStar or CN\@{}ChemSCite depending on
%   whether '*' was used.
%    \begin{macrocode}
\DeclareRobustCommand*{\ChemSCite}{%
  \@ifstar{\CN@ChemSCiteStar}{\CN@ChemSCite}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ChemMFCite}
%   Delegate to CN\@{}ChemMFCiteStar or CN\@{}ChemMFCite depending on
%   whether '*' was used.
%    \begin{macrocode}
\DeclareRobustCommand*{\ChemMFCite}{%
  \@ifstar{\CN@ChemMFCiteStar}{\CN@ChemMFCite}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ChemMSCite}
%   Delegate to CN\@{}ChemMSCiteStar or CN\@{}ChemMSCite depending on
%   whether '*' was used.
%    \begin{macrocode}
\DeclareRobustCommand*{\ChemMSCite}{%
  \@ifstar{\CN@ChemMSCiteStar}{\CN@ChemMSCite}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DefineChemical}\marg{main!sub key}\marg{name}\marg{label}
%   Associate a key with a chemical name and sub-label by inserting a
%   |\CN@definenewchemical| macro call into the \textsf{aux} file.
%    \begin{macrocode}
\DeclareRobustCommand*{\DefineChemical}[3]{%
  \CN@definenewchemical{#1}{#2}{#3}%
  \write\@auxout{\string\CN@definenewchemical{#1}{#2}{#3}}%
}%end def
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\makeatother
%    \end{macrocode}
%
% \Finale
\endinput
